{
    "id": "javascript",
    "patterns": ["function_expression"],
    "lang_features": {
        "punctuation": {
            "match": "\\W",
            "id": "punctuation" 
        },
        "whitespace": {
            "match": "\\s",
            "id": ""
        },
        "function": {
            "match": "\\b[a-z][\\w]+?(?=\\()\\b",
            "id": "function"
        },
        "paren_begin": {
            "match": "\\(",
            "id": "punctuation.paren.open"
        },
        "paren_end": {
            "match": "\\)",
            "id": "punctuation.paren.close"
        },
        "bracket_begin": {
            "match": "\\{",
            "id": "punctuation.bracket.open"
        },
        "bracket_end": {
            "match": "\\}",
            "id": "punctuation.bracket.close"
        },
        "keyword": {
            "match": "\\b(abstract|break|char|debugger|double|export|finally|goto|in|let|null|public|super|throw|try|volatile|arguments|byte|class|default|else|extends|float|if|instanceof|long|package|return|switch|throws|typeof|while|await|case|const|delete|enum|false|for|implements|int|native|private|short|synchronized|transient|var|with|boolean|catch|continue|do|eval|final|function|import|interface|new|protected|static|this|true|void|yield|from)\\b",
            "id": "keyword"
        },
        "number": {
            "match": "\\b\\d+?\\b",
            "id": "number"
        },
        "variable": {
            "match": "\\b[a-z]([\\w]+)?",
            "id": "variable"
        },
        "object": {
            "match": "\\b[A-Z]([\\w]+)?",
            "id": "object"
        },
        "operator": {
            "match": "\\=|\\+|\\-|\\*|\\/|\\%|\\+\\+|\\-\\\\\\\\-|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=|\\=\\=|\\=\\=\\=|\\!\\=|\\!\\=\\=|\\>|\\<|\\>\\=|\\<\\=|\\?|\\:|\\&\\&|\\|\\||\\!|\\&|\\||\\~|\\^|\\<\\<|\\>\\>",
            "id": "operator"
        }
    },
    "keywords": [
        "abstract",
        "break",
        "char",
        "debugger",
        "double",
        "export",
        "finally",
        "goto",
        "in",
        "let",
        "null",
        "public",
        "super",
        "throw",
        "try",
        "volatile",
        "arguments",
        "byte",
        "class",
        "default",
        "else",
        "extends",
        "float",
        "if",
        "instanceof",
        "long",
        "package",
        "return",
        "switch",
        "throws",
        "typeof",
        "while",
        "await",
        "case",
        "const",
        "delete",
        "enum",
        "false",
        "for",
        "implements",
        "int",
        "native",
        "private",
        "short",
        "synchronized",
        "transient",
        "var",
        "with",
        "boolean",
        "catch",
        "continue",
        "do",
        "eval",
        "final",
        "function",
        "import",
        "interface",
        "new",
        "protected",
        "static",
        "this",
        "true",
        "void",
        "yield",
        "from"
    ],
    "operators": [
        "=",
        "+",
        "-",
        "*",
        "/",
        "%",
        "++",
        "-\\-",
        "+=",
        "-=",
        "*=",
        "/=",
        "%=",
        "==",
        "===",
        "!=",
        "!==",
        ">",
        "<",
        ">=",
        "<=",
        "?",
        ":",
        "&&",
        "||",
        "!",
        "&",
        "|",
        "~",
        "^",
        "<<",
        ">>"
    ],
    "string_template": "\"",
    "string_literal": "'",
    "line_comment": "\/\/",
    "multiline_comment": {
        "start": "\/\\*",
        "end": "\\*\/"
    },
    "docs_comment": {
        "start": "\/\\*\\*",
        "middle": "\\*",
        "end": "\\*\/"
    }
}